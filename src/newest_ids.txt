/**
 * \file SmartECLA_IDs.h
 * Created by The Next-Generation SmartECLA TOML Code Generator on 2022-09-15T11:43:59.650938
 */
#ifndef SMARTECLA_IDS_H_
#define SMARTECLA_IDS_H_

// Block IDs for filtering received messages
#define BLOCK_ID_MASK			(0xFF << 24)
#define BLOCK_ID_MEDICAL_ALERT (0x02 << 24)
#define BLOCK_ID_LOW_PRIO_ALERT (0x03 << 24)
#define BLOCK_ID_DEVICE_COMMAND (0x05 << 24)
#define BLOCK_ID_MODEL_COMMAND (0x06 << 24)
#define BLOCK_ID_SAFETY_COMMAND (0x07 << 24)
#define BLOCK_ID_CONTROL_VALUES (0x08 << 24)
#define BLOCK_ID_MMU_NOTIFY (0x0a << 24)
#define BLOCK_ID_MODEL_NOTIFY (0x0b << 24)
#define BLOCK_ID_NETWORK_NOTIFY (0x0c << 24)
#define BLOCK_ID_USED_ID (0x0d << 24)
#define BLOCK_ID_MEASUREMENTS (0x10 << 24)
#define BLOCK_ID_PARAMETERS (0x11 << 24)

// Device IDs for filtering received messages
#define DEVICE_ID_MASK			(0xFF << 16)
#define DEVICE_ID_INTERNAL (0x00 << 16)
#define DEVICE_ID_CDI (0x01 << 16)
#define DEVICE_ID_GAS (0x02 << 16)
#define DEVICE_ID_PRESSURE (0x03 << 16)
#define DEVICE_ID_PGA (0x06 << 16)
#define DEVICE_ID_PUMP (0x0d << 16)
#define DEVICE_ID_SONOTT (0x12 << 16)
#define DEVICE_ID_LCONTROL (0x16 << 16)
#define DEVICE_ID_PHREGULATION (0x18 << 16)
#define DEVICE_ID_MX500 (0x20 << 16)
#define DEVICE_ID_OTHERS (0xff << 16)

// one default shifter
#define DEFAULT_DEVNUMBER_SHIFT		12
// safety defines
#define SAFETY_TOO_LOW			(0x100)
#define SAFETY_TOO_HIGH			(0x101)

// shifter values (all are 12)
#define DEVICE_CDI_SHIFT 12
#define DEVICE_PGA_SHIFT 12
#define DEVICE_PUMP_SHIFT 12
#define DEVICE_LCONTROL_SHIFT 12
#define DEVICE_PHREGULATION_SHIFT 12

#define MESSAGE_STARTUP                         0x0C000000  // indicates how the masked bits have to be set
#define MESSAGE_DISABLED_CARDS                  0x0C000010  // Needed for building the card disabled message ID in MCU code
#define MESSAGE_STATUS_REPLY                    0x0C000020  // Needed for building the status message ID in MCU code


//! Macro to read the device number out of an ID
#define getDeviceNumber(id,shifter)			((id >> shifter) & 0xF)
//! Macro to add the device number to an id. The preset bits at the device number's position in the IDs are discarded.
#define addDeviceNumber(devNum,id,shifter)	((id & ~(0xF << shifter)) | (devNum << shifter))
enum message_id { 
    //! Performance Messungen
    ID_PERFORMANCE_COUNTER = 0x00000010, 
    //! Beacon for time synchronization
    ID_TIME_BEACON = 0x00000100, 
    //! Given measurement is too low
    ID_CDI_X_MEASUREMENT_TOO_LOW = 0x02010100, 
    //! Given measurement is too high
    ID_CDI_X_MEASUREMENT_TOO_HIGH = 0x02010101, 
    //! Acquire define missing for Message-ID
    ID_CDI_X_ACQUIRE_MISSING = 0x02010f00, 
    //! Given measurement is too low
    ID_GAS_MEASUREMENT_TOO_LOW = 0x02020100, 
    //! Given measurement is too high
    ID_GAS_MEASUREMENT_TOO_HIGH = 0x02020101, 
    //! Acquire define missing for Message-ID
    ID_GAS_ACQUIRE_MISSING = 0x02020f00, 
    //! Given measurement is too low
    ID_PRESSURE_MEASUREMENT_TOO_LOW = 0x02030100, 
    //! Given measurement is too high
    ID_PRESSURE_MEASUREMENT_TOO_HIGH = 0x02030101, 
    //! Acquire define missing for Message-ID
    ID_PRESSURE_ACQUIRE_MISSING = 0x02030f00, 
    //! Given measurement is too low
    ID_PGA_X_MEASUREMENT_TOO_LOW = 0x02060100, 
    //! Given measurement is too high
    ID_PGA_X_MEASUREMENT_TOO_HIGH = 0x02060101, 
    //! Acquire define missing for Message-ID
    ID_PGA_X_ACQUIRE_MISSING = 0x02060f00, 
    //! Alert if break is active
    ID_PUMP_X_MODE_BRAKE = 0x020d0000, 
    //! Enable safety mode if problems detected
    ID_PUMP_X_MODE_SAFETY = 0x020d0001, 
    //! Given measurement is too low
    ID_PUMP_X_MEASUREMENT_TOO_LOW = 0x020d0100, 
    //! Given measurement is too high
    ID_PUMP_X_MEASUREMENT_TOO_HIGH = 0x020d0101, 
    //! Acquire define missing for Message-ID
    ID_PUMP_X_ACQUIRE_MISSING = 0x020d0f00, 
    //! Given measurement is too low
    ID_SONOTT_MEASUREMENT_TOO_LOW = 0x02120100, 
    //! Given measurement is too high
    ID_SONOTT_MEASUREMENT_TOO_HIGH = 0x02120101, 
    //! Acquire define missing for Message-ID
    ID_SONOTT_ACQUIRE_MISSING = 0x02120f00, 
    //! Given measurement is too low
    ID_LCONTROL_X_MEASUREMENT_TOO_LOW = 0x02160100, 
    //! Given measurement is too high
    ID_LCONTROL_X_MEASUREMENT_TOO_HIGH = 0x02160101, 
    //! Acquire define missing for Message-ID
    ID_LCONTROL_X_ACQUIRE_MISSING = 0x02160f00, 
    //! Given measurement is too low
    ID_PHREGULATION_X_MEASUREMENT_TOO_LOW = 0x02180100, 
    //! Given measurement is too high
    ID_PHREGULATION_X_MEASUREMENT_TOO_HIGH = 0x02180101, 
    //! Acquire define missing for Message-ID
    ID_PHREGULATION_X_ACQUIRE_MISSING = 0x02180f00, 
    //! Negative Pressure Value at Sensor 1
    ID_MX500_PRESSURE_SIG1_NEG = 0x02200009, 
    //! Negative Pressure Value at Sensor 2
    ID_MX500_PRESSURE_SIG2_NEG = 0x0220000a, 
    //! Negative Pressure Value at Sensor 3
    ID_MX500_PRESSURE_SIG3_NEG = 0x0220000b, 
    //! Negative Pressure Value at Sensor 4
    ID_MX500_PRESSURE_SIG4_NEG = 0x0220000c, 
    //! Given measurement is too low
    ID_MX500_MEASUREMENT_TOO_LOW = 0x02200100, 
    //! Given measurement is too high
    ID_MX500_MEASUREMENT_TOO_HIGH = 0x02200101, 
    //! Acquire define missing for Message-ID
    ID_MX500_ACQUIRE_MISSING = 0x02200f00, 
    //! Warning if CO2 is too high
    ID_PHREGULATION_X_CO2WARNING = 0x03180006, 
    //! Warning if Kp is out of bounds
    ID_PHREGULATION_X_KPWARNING = 0x03180007, 
    //! Warning if PH is out of bounds
    ID_PHREGULATION_X_PHWARNING = 0x03180008, 
    //! Warning if the flow is too low to for injections
    ID_PHREGULATION_X_FLOWWARNING = 0x03180009, 
    //! Flag for manual mode rpm (0), manual mode pressure (1), auto mode (2)
    ID_PUMP_X_MODE_USER = 0x050d0000, 
    //! User reference RPM
    ID_PUMP_X_USER_RPM = 0x050d0001, 
    //! Model identification enable
    ID_PUMP_X_IDENT_ENABLE = 0x050d0002, 
    //! Model identification chirp enable
    ID_PUMP_X_IDENT_CHIRP_ENABLE = 0x050d0003, 
    //! Model identification step enable
    ID_PUMP_X_IDENT_STEP_ENABLE = 0x050d0004, 
    //! Pulsatile mode enabled
    ID_PUMP_X_PULSATILE_ENABLE = 0x050d0005, 
    //! Pulsatile, new parameters
    ID_PUMP_X_PULSATILE_NEW = 0x050d0006, 
    //! User reference pressure
    ID_PUMP_X_USER_PRESSURE = 0x050d0007, 
    //! User reference flow
    ID_PUMP_X_USER_FLOW = 0x050d0008, 
    //! Enable Test mode to test system and detect problems
    ID_PUMP_X_MODE_TEST = 0x050d0009, 
    //! Position of the rotary button, which starts at the value 2^31 and is incremented or decremented from this value on
    ID_PUMP_X_BUTTON_POSITON = 0x050d000a, 
    //! Pulsatile blood flow mode (0 = off)
    ID_PHREGULATION_X_PULSATILE_MODE = 0x05180001, 
    //! Target PH value
    ID_PHREGULATION_X_PH_TARGET = 0x05180002, 
    //! Stops the model, before damaging the kidney
    ID_PHREGULATION_X_EMERGENCYSTOP = 0x06180005, 
    //! Set command for safety layer
    ID_SAFETY_SET = 0x07000001, 
    //! Timeout in safety state machine
    ID_SAFETY_TIMEOUT = 0x07000002, 
    //! Control Values (Stellwert), set Point for CO2 (gasblender)
    ID_GAS_SET_POINT_CO2 = 0x08020000, 
    //! Control Values (Stellwert), set Point for O2 (gasblender)
    ID_GAS_SET_POINT_O2 = 0x08020001, 
    //! Control Values (Stellwert), set Point for N2 (gasblender)
    ID_GAS_SET_POINT_N2 = 0x08020002, 
    //! Set Function of MCU
    ID_PGA_X_FUNCTION_NUMBER = 0x08060000, 
    //! Send Command to PGA
    ID_PGA_X_COMMAND = 0x08060001, 
    //! Enable/ Disable O2 RT channel
    ID_PGA_X_SET_RT_O2 = 0x08060002, 
    //! Measured RPM
    ID_PUMP_X_MEASURED_RPM = 0x080d0000, 
    //! Measured Current
    ID_PUMP_X_MEASURED_CURRENT = 0x080d0001, 
    //! Corrected RPM
    ID_PUMP_X_CORRECTED_RPM = 0x080d0002, 
    //! MMU-Notifications, error in set Point for CO2 (gasblender)
    ID_GAS_ERROR_SET_POINT_CO2 = 0x0a020006, 
    //! MMU-Notifications, error in set Point for O2 (gasblender)
    ID_GAS_ERROR_SET_POINT_O2 = 0x0a020007, 
    //! MMU-Notifications, error in set Point for N2 (gasblender)
    ID_GAS_ERROR_SET_POINT_N2 = 0x0a020008, 
    //! Startup sequence send out by 
    ID_CDI_X_STARTUP = 0x0c010000, 
    //! Card of MCU full: 
    ID_CDI_X_CARD_DISABLED = 0x0c010010, 
    //! Status message of MCU in response of the time beacon: 
    ID_CDI_X_STATUS_REPLY = 0x0c010020, 
    //! Alive message
    ID_CDI_X_ALIVE = 0x0c010030, 
    //! Startup sequence send out by 
    ID_GAS_STARTUP = 0x0c020000, 
    //! Card of MCU full: 
    ID_GAS_CARD_DISABLED = 0x0c020010, 
    //! Status message of MCU in response of the time beacon: 
    ID_GAS_STATUS_REPLY = 0x0c020020, 
    //! Alive message
    ID_GAS_ALIVE = 0x0c020030, 
    //! Startup sequence send out by 
    ID_PRESSURE_STARTUP = 0x0c030000, 
    //! Card of MCU full: 
    ID_PRESSURE_CARD_DISABLED = 0x0c030010, 
    //! Status message of MCU in response of the time beacon: 
    ID_PRESSURE_STATUS_REPLY = 0x0c030020, 
    //! Alive message
    ID_PRESSURE_ALIVE = 0x0c030030, 
    //! Startup sequence send out by 
    ID_PGA_X_STARTUP = 0x0c060000, 
    //! Card of MCU full: 
    ID_PGA_X_CARD_DISABLED = 0x0c060010, 
    //! Status message of MCU in response of the time beacon: 
    ID_PGA_X_STATUS_REPLY = 0x0c060020, 
    //! Alive message
    ID_PGA_X_ALIVE = 0x0c060030, 
    //! Startup sequence send out by 
    ID_PUMP_X_STARTUP = 0x0c0d0000, 
    //! Card of MCU full: 
    ID_PUMP_X_CARD_DISABLED = 0x0c0d0010, 
    //! Status message of MCU in response of the time beacon: 
    ID_PUMP_X_STATUS_REPLY = 0x0c0d0020, 
    //! Alive message
    ID_PUMP_X_ALIVE = 0x0c0d0030, 
    //! Startup sequence send out by 
    ID_SONOTT_STARTUP = 0x0c120000, 
    //! Card of MCU full: 
    ID_SONOTT_CARD_DISABLED = 0x0c120010, 
    //! Status message of MCU in response of the time beacon: 
    ID_SONOTT_STATUS_REPLY = 0x0c120020, 
    //! Alive message
    ID_SONOTT_ALIVE = 0x0c120030, 
    //! Startup sequence send out by 
    ID_LCONTROL_X_STARTUP = 0x0c160000, 
    //! Card of MCU full: 
    ID_LCONTROL_X_CARD_DISABLED = 0x0c160010, 
    //! Status message of MCU in response of the time beacon: 
    ID_LCONTROL_X_STATUS_REPLY = 0x0c160020, 
    //! Alive message
    ID_LCONTROL_X_ALIVE = 0x0c160030, 
    //! Startup sequence send out by 
    ID_PHREGULATION_X_STARTUP = 0x0c180000, 
    //! Card of MCU full: 
    ID_PHREGULATION_X_CARD_DISABLED = 0x0c180010, 
    //! Status message of MCU in response of the time beacon: 
    ID_PHREGULATION_X_STATUS_REPLY = 0x0c180020, 
    //! Alive message
    ID_PHREGULATION_X_ALIVE = 0x0c180030, 
    //! Startup sequence send out by 
    ID_MX500_STARTUP = 0x0c200000, 
    //! Card of MCU full: 
    ID_MX500_CARD_DISABLED = 0x0c200010, 
    //! Status message of MCU in response of the time beacon: 
    ID_MX500_STATUS_REPLY = 0x0c200020, 
    //! Alive message
    ID_MX500_ALIVE = 0x0c200030, 
    //! resend startup
    ID_RESEND_STARTUP = 0x0cffffff, 
    //! Used Ids send out by 
    ID_CDI_X_USED_IDS = 0x0d010000, 
    //! Used Ids send out by 
    ID_GAS_USED_IDS = 0x0d020000, 
    //! Used Ids send out by 
    ID_PRESSURE_USED_IDS = 0x0d030000, 
    //! Used Ids send out by 
    ID_PGA_X_USED_IDS = 0x0d060000, 
    //! Used Ids send out by 
    ID_PUMP_X_USED_IDS = 0x0d0d0000, 
    //! Used Ids send out by 
    ID_SONOTT_USED_IDS = 0x0d120000, 
    //! Used Ids send out by 
    ID_LCONTROL_X_USED_IDS = 0x0d160000, 
    //! Used Ids send out by 
    ID_PHREGULATION_X_USED_IDS = 0x0d180000, 
    //! Used Ids send out by 
    ID_MX500_USED_IDS = 0x0d200000, 
    //! Devices should send out their used IDS
    ID_SEND_USED_IDS = 0x0dffffff, 
    //! Arterial pH
    ID_CDI_X_APH = 0x10010000, 
    //! Arterial CO2
    ID_CDI_X_ACO2 = 0x10010001, 
    //! Arterial O2
    ID_CDI_X_AO2 = 0x10010002, 
    //! Arterial Termperature
    ID_CDI_X_ATEMP = 0x10010003, 
    //! Arterial O2 Saturation
    ID_CDI_X_ASO2 = 0x10010004, 
    //! Arterial HCO3
    ID_CDI_X_AHCO3 = 0x10010005, 
    //! Arterial Base Excess
    ID_CDI_X_ABASE = 0x10010006, 
    //! K+
    ID_CDI_X_KALIUM = 0x10010007, 
    //! Vo2 Consumption
    ID_CDI_X_UO2 = 0x10010008, 
    //! Venous pH
    ID_CDI_X_VPH = 0x10010009, 
    //! Venous CO2
    ID_CDI_X_VCO2 = 0x1001000a, 
    //! Venous O2
    ID_CDI_X_VO2 = 0x1001000b, 
    //! Venous Termperature
    ID_CDI_X_VTEMP = 0x1001000c, 
    //! Venous O2 Saturation
    ID_CDI_X_VSO2 = 0x1001000d, 
    //! Venous HCO3
    ID_CDI_X_VHCO3 = 0x1001000e, 
    //! Venous Base Excess
    ID_CDI_X_VBASE = 0x1001000f, 
    //! Hematocrit
    ID_CDI_X_HCT = 0x10010010, 
    //! Hemoglobin
    ID_CDI_X_HGB = 0x10010011, 
    //! Arterial Flow
    ID_CDI_X_AFLOW = 0x10010012, 
    //! Body Surface
    ID_CDI_X_BSA = 0x10010013, 
    //! Measurements, actual value for CO2 (gasblender)
    ID_GAS_ACTUAL_CO2 = 0x10020003, 
    //! Measurements, actual value for O2 (gasblender)
    ID_GAS_ACTUAL_O2 = 0x10020004, 
    //! Measurements, actual value for N2 (gasblender)
    ID_GAS_ACTUAL_N2 = 0x10020005, 
    //! Pressure Sensor Signal 1
    ID_PRESSURE_SIG1 = 0x10030000, 
    //! Pressure Sensor Signal 2
    ID_PRESSURE_SIG2 = 0x10030001, 
    //! Pressure Sensor Signal 3
    ID_PRESSURE_SIG3 = 0x10030002, 
    //! Pressure Sensor Signal 4
    ID_PRESSURE_SIG4 = 0x10030003, 
    //! Running Average of Pressure Signal 1
    ID_PRESSURE_AVG1 = 0x10030004, 
    //! Running Average of Pressure Signal 2
    ID_PRESSURE_AVG2 = 0x10030005, 
    //! Running Average of Pressure Signal 3
    ID_PRESSURE_AVG3 = 0x10030006, 
    //! Running Average of Pressure Signal 4
    ID_PRESSURE_AVG4 = 0x10030007, 
    //! O2 concentration
    ID_PGA_X_RT_O2 = 0x10060000, 
    //! O2 concentration valid
    ID_PGA_X_RT_O2_VALID = 0x10060001, 
    //! Reference pressure
    ID_PUMP_X_REFERENCE_PRESSURE = 0x100d0000, 
    //! Reference flow
    ID_PUMP_X_REFERENCE_FLOW = 0x100d0001, 
    //! Measured pressure
    ID_PUMP_X_MEASURED_PRESSURE = 0x100d0002, 
    //! Measured flow
    ID_PUMP_X_MEASURED_FLOW = 0x100d0003, 
    //! Measured flow
    ID_PUMP_X_MEASURED_FLOW_DERIVATIVE = 0x100d0004, 
    //! Control deviation of rpm
    ID_PUMP_X_CONTROL_DEVIATION_RPM = 0x100d0005, 
    //! Control deviation of pressure
    ID_PUMP_X_CONTROL_DEVIATION_PRESSURE = 0x100d0006, 
    //! Control deviation of flow
    ID_PUMP_X_CONTROL_DEVIATION_FLOW = 0x100d0007, 
    //! Message for pressure mode (1), flow mode (2), pulsatile mode (3), manual mode (4)
    ID_PUMP_X_MODE_CONTROL = 0x100d0008, 
    //! Measured pressure pulsatile
    ID_PUMP_X_MEASURED_PRESSURE_PULSATILE = 0x100d0009, 
    //! Control deviation of pressure pulsatile
    ID_PUMP_X_CONTROL_DEVIATION_PRESSURE_PULSATILE = 0x100d000a, 
    //! Reference Rpm
    ID_PUMP_X_REFERENCE_RPM = 0x100d000b, 
    //! Value for frontboard display left top one
    ID_PUMP_X_DISPLAY_LEFT_TOP = 0x100d000c, 
    //! Value for frontboard display left bottom one
    ID_PUMP_X_DISPLAY_LEFT_BOT = 0x100d000d, 
    //! Value for frontboard display right top one
    ID_PUMP_X_DISPLAY_RIGHT_TOP = 0x100d000e, 
    //! Value for frontboard display right bottom one
    ID_PUMP_X_DISPLAY_RIGHT_BOT = 0x100d000f, 
    //! The result of the test mode (0):none (1):error (2):ok
    ID_PUMP_X_DISPLAY_TEST = 0x100d0010, 
    //! The LED lamps, which shall be set, binary encoded (binary position 0:top, 1:right, 2:middle, 3:left, so for example 0b0010 to only set the right led)
    ID_PUMP_X_DISPLAY_LED = 0x100d0011, 
    //! The Bar elements, which shall be set in percentage from 0 to 100 %
    ID_PUMP_X_DISPLAY_BAR = 0x100d0012, 
    //! Current bloodflow of sensor 1
    ID_SONOTT_FLOW1 = 0x10120000, 
    //! Current bloodflow of sensor 2
    ID_SONOTT_FLOW2 = 0x10120001, 
    //! Ultrasonic coupling of sensor 1
    ID_SONOTT_COUPLING1 = 0x10120002, 
    //! Ultrasonic coupling of sensor 2
    ID_SONOTT_COUPLING2 = 0x10120003, 
    //! Statuscode of sensor 2
    ID_SONOTT_STATUS1 = 0x10120004, 
    //! Statuscode of sensor 1
    ID_SONOTT_STATUS2 = 0x10120005, 
    //! State of the level control sensor
    ID_LCONTROL_X_SENSOR_STATE = 0x10160000, 
    //! Set flow rate on channel 1
    ID_LCONTROL_X_SET_VOLUME_CHANNEL_1 = 0x10160001, 
    //! Set flow rate on channel 2
    ID_LCONTROL_X_SET_VOLUME_CHANNEL_2 = 0x10160002, 
    //! Set flow rate on channel 3
    ID_LCONTROL_X_SET_VOLUME_CHANNEL_3 = 0x10160003, 
    //! Set flow rate on channel 4
    ID_LCONTROL_X_SET_VOLUME_CHANNEL_4 = 0x10160004, 
    //! Starts the model
    ID_PHREGULATION_X_START = 0x10180000, 
    //! The volume which will be injected in
    ID_PHREGULATION_X_VOLUME = 0x10180001, 
    //! The ID of the pump
    ID_PHREGULATION_X_PUMPNR = 0x10180002, 
    //! The infusion rate
    ID_PHREGULATION_X_IRATE = 0x10180003, 
    //! The time in seconds to the next execution of the model
    ID_PHREGULATION_X_COUNTDOWN = 0x10180004, 
    //! Sends a signal after the injection
    ID_PHREGULATION_X_INJECTION_DONE = 0x10180005, 
    //! Sends a signal before the injection
    ID_PHREGULATION_X_INJECTION_READY = 0x10180006, 
    //! The current slope of the blood flow
    ID_PHREGULATION_X_FLOW_SLOPE = 0x10180007, 
    //! the time between injection_ready and injection_done
    ID_PHREGULATION_X_OFFSET = 0x10180008, 
    //! Is sent in between steps to avoid alarms
    ID_PHREGULATION_X_ALIVE_SIGNAL = 0x10180009, 
    //! Pressure Sensor Signal 1
    ID_MX500_PRESSURE_SIG1 = 0x10200000, 
    //! Pressure Sensor Signal 2
    ID_MX500_PRESSURE_SIG2 = 0x10200001, 
    //! Pressure Sensor Signal 3
    ID_MX500_PRESSURE_SIG3 = 0x10200002, 
    //! Pressure Sensor Signal 4
    ID_MX500_PRESSURE_SIG4 = 0x10200003, 
    //! Running Average of Pressure Signal 1
    ID_MX500_PRESSURE_AVG1 = 0x10200004, 
    //! Running Average of Pressure Signal 2
    ID_MX500_PRESSURE_AVG2 = 0x10200005, 
    //! Running Average of Pressure Signal 3
    ID_MX500_PRESSURE_AVG3 = 0x10200006, 
    //! Running Average of Pressure Signal 4
    ID_MX500_PRESSURE_AVG4 = 0x10200007, 
    //! Temperature
    ID_MX500_TEMP1 = 0x10200008, 
    //! Temperature
    ID_MX500_TEMP2 = 0x10200009, 
    //! Pulsatile reference trajectory
    ID_PUMP_X_PULSATILE_REFERENCE = 0x110d0000, 
    //! Pulsatile, period for trajectory, note that maximum value is dependend on the sample time
    ID_PUMP_X_PULSATILE_PERIOD = 0x110d0001, 
    //! Pulsatile, amplitude for trajectory
    ID_PUMP_X_PULSATILE_AMPLITUDE = 0x110d0002, 
    //! Rotary button pressure steps per position change [mmHg]
    ID_PUMP_X_PARA_BUTTON_PRES_STEP = 0x110d0100, 
    //! Rotary button rpm steps per position change [rpm]
    ID_PUMP_X_PARA_BUTTON_RPM_STEP = 0x110d0101, 
    //! Controller Flow I value [E-3]
    ID_PUMP_X_PARA_CONT_FLOW_I = 0x110d0102, 
    //! Controller Flow P value [E-3]
    ID_PUMP_X_PARA_CONT_FLOW_P = 0x110d0103, 
    //! Controller Pressure I value [E-3]
    ID_PUMP_X_PARA_CONT_PRES_I = 0x110d0104, 
    //! Controller Pressure P value [E-3]
    ID_PUMP_X_PARA_CONT_PRES_P = 0x110d0105, 
    //! Current Max Value [mA]
    ID_PUMP_X_PARA_CURRENT_MAX = 0x110d0106, 
    //! Engine RPM Max Value [rpm]
    ID_PUMP_X_PARA_ENGINE_RPM_MAX = 0x110d0107, 
    //! Engine RPM Min Value [rpm]
    ID_PUMP_X_PARA_ENGINE_RPM_MIN = 0x110d0108, 
    //! End frequency of chirp signal [E-3 * Hz]
    ID_PUMP_X_PARA_IDENT_CHIRP_END = 0x110d0109, 
    //! Start frequency for chirp [E-3 * Hz]
    ID_PUMP_X_PARA_IDENT_CHIRP_START = 0x110d010a, 
    //! Total time for chirp to reach end frequency [sec]
    ID_PUMP_X_PARA_IDENT_CHIRP_TIME = 0x110d010b, 
    //! Scaling the identification output before the offset is applied [no Unit]
    ID_PUMP_X_PARA_IDENT_GAIN = 0x110d010c, 
    //! RPM offset for identification output [rpm]
    ID_PUMP_X_PARA_IDENT_OFFSET = 0x110d010d, 
    //! End value after step (added to offset) [rpm]
    ID_PUMP_X_PARA_IDENT_STEP_END = 0x110d010e, 
    //! Start value for step (added to offset) [rpm]
    ID_PUMP_X_PARA_IDENT_STEP_START = 0x110d010f, 
    //! Start time for step [sec]
    ID_PUMP_X_PARA_IDENT_STEP_TIME = 0x110d0110, 
    //! Flow constant mode, reference flow value [ml / min]
    ID_PUMP_X_PARA_TRAJ_FLOW_CONSTANT = 0x110d0111, 
    //! Pressure initialization mode, pressure value to reach quickly at beginning [mmHg]
    ID_PUMP_X_PARA_TRAJ_INI_PRESSURE = 0x110d0112, 
    //! Pressure initialization mode, time it shall take to reach iniPressure value in beginning [sec]
    ID_PUMP_X_PARA_TRAJ_INI_TIME_END = 0x110d0113, 
    //! Mode switch, maximum flow value which triggers switch to flow control [ml / min]
    ID_PUMP_X_PARA_TRAJ_MODE_SWITCH_FLOW = 0x110d0114, 
    //! In Auto mode, parameter to activate if switching to flow mode is possible if flow is to high 0:off 1:on [none]
    ID_PUMP_X_PARA_TRAJ_MODE_SWITCH_ON = 0x110d0115, 
    //! Mode switch, maximum pressure value which triggers switch to pressure control [mmHg]
    ID_PUMP_X_PARA_TRAJ_MODE_SWITCH_PRESSURE = 0x110d0116, 
    //! Mode switch, minimum time to wait between mode switches - do not choose too low [sec]
    ID_PUMP_X_PARA_TRAJ_MODE_SWITCH_TIME = 0x110d0117, 
    //! Pressure constant mode, reference pressure value [mmHg]
    ID_PUMP_X_PARA_TRAJ_PRESSURE_CONSTANT = 0x110d0118, 
    //! Pulsatile, dead time, maximum value can not be higher than period time [ms]
    ID_PUMP_X_PARA_TRAJ_PULS_DEAD_TIME = 0x110d0119, 
    //! Pulsatile, learning factor [none]
    ID_PUMP_X_PARA_TRAJ_PULS_LEARN_P = 0x110d011a, 
    //! Pulsatile, area around the refereance trajectory that shall be reached [E-3 * mmHg]
    ID_PUMP_X_PARA_TRAJ_PULS_TOLERANCE = 0x110d011b, 
    //! Control flow ramping, decrease of reference signal per second to prevent sudden steps [(ml / min) / sec]
    ID_PUMP_X_PARA_TRAJ_RAMP_FLOW_DEC = 0x110d011c, 
    //! Control flow ramping, increase of reference signal per second to prevent sudden steps [(ml / min) / sec]
    ID_PUMP_X_PARA_TRAJ_RAMP_FLOW_INC = 0x110d011d, 
    //! Control pressure ramping, decrease of reference signal per second to prevent sudden steps [mmHg / sec]
    ID_PUMP_X_PARA_TRAJ_RAMP_PRES_DEC = 0x110d011e, 
    //! Control pressure ramping, increase of reference signal per second to prevent sudden steps [mmHg / sec]
    ID_PUMP_X_PARA_TRAJ_RAMP_PRES_INC = 0x110d011f, 
    //! Safety mode fallback rotational speed [rpm]
    ID_PUMP_X_PARA_TRAJ_SAFETY_RPM = 0x110d0120, 
    //! Pressure startup mode flow, maximum allowed increase of flow per minute (=derivative) which has to hold for a period of time to proceed with pressure increase [(ml / min) / min]
    ID_PUMP_X_PARA_TRAJ_STARTUP_FLOW_GRADIENT = 0x110d0121, 
    //! In Auto Startup mode, parameter to activate the step wise increase with waiting until a constant flow is reached 0:off 1:on [none]
    ID_PUMP_X_PARA_TRAJ_STARTUP_FLOW_ON = 0x110d0122, 
    //! Pressure startup mode flow, the pressure increase per increase step [mmHg]
    ID_PUMP_X_PARA_TRAJ_STARTUP_FLOW_PRESSURE_INCREASE = 0x110d0123, 
    //! Pressure startup mode flow, the time the flow has to be steady until to proceed with next pressure increase [sec]
    ID_PUMP_X_PARA_TRAJ_STARTUP_FLOW_STEADY_TIME = 0x110d0124, 
    //! Pressure startup mode flow, maximum time limit to wait for a steady flow until next pressure increase [sec]
    ID_PUMP_X_PARA_TRAJ_STARTUP_FLOW_STEADY_TIME_MAX = 0x110d0125, 
    //! Pressure startup mode flow, the time one pressure increase step takes [sec]
    ID_PUMP_X_PARA_TRAJ_STARTUP_FLOW_TIME_STEP = 0x110d0126, 
    //! Pressure startup mode normal, the time the pressure increase takes [sec]
    ID_PUMP_X_PARA_TRAJ_STARTUP_NORMAL_DURATION = 0x110d0127, 
    //! Turns off the pulsatile blood flow
    ID_PHREGULATION_X_PULS_OFF = 0x11180007, 
};
#endif /* SMARTECLA_IDS_H_ */
